üéâ Prometheus and Grafana monitoring stack has been deployed successfully!

{{- if .Values.prometheus.enabled }}

üìä PROMETHEUS SERVER:
{{- if .Values.prometheus.server.ingress.enabled }}
{{- range $host := .Values.prometheus.server.ingress.hosts }}
  {{- range .paths }}
  üåê Prometheus URL: http{{ if $.Values.prometheus.server.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.prometheus.server.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "prometheus-grafana.prometheus.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo "Prometheus URL: http://$NODE_IP:$NODE_PORT"
{{- else if contains "LoadBalancer" .Values.prometheus.server.service.type }}
  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "prometheus-grafana.prometheus.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo "Prometheus URL: http://$SERVICE_IP:{{ .Values.prometheus.server.service.port }}"
{{- else if contains "ClusterIP" .Values.prometheus.server.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "prometheus-grafana.prometheus.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  echo "Visit http://127.0.0.1:9090 to access Prometheus"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 9090:9090
{{- end }}

{{- if .Values.prometheus.alertmanager.enabled }}

üö® ALERTMANAGER:
{{- if .Values.prometheus.alertmanager.ingress.enabled }}
{{- range $host := .Values.prometheus.alertmanager.ingress.hosts }}
  {{- range .paths }}
  üåê AlertManager URL: http{{ if $.Values.prometheus.alertmanager.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "prometheus-grafana.alertmanager.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  echo "Visit http://127.0.0.1:9093 to access AlertManager"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 9093:9093
{{- end }}
{{- end }}
{{- end }}

{{- if .Values.grafana.enabled }}

üìà GRAFANA:
{{- if .Values.grafana.ingress.enabled }}
{{- range $host := .Values.grafana.ingress.hosts }}
  {{- range .paths }}
  üåê Grafana URL: http{{ if $.Values.grafana.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.grafana.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "prometheus-grafana.grafana.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo "Grafana URL: http://$NODE_IP:$NODE_PORT"
{{- else if contains "LoadBalancer" .Values.grafana.service.type }}
  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "prometheus-grafana.grafana.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo "Grafana URL: http://$SERVICE_IP:{{ .Values.grafana.service.port }}"
{{- else if contains "ClusterIP" .Values.grafana.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "prometheus-grafana.grafana.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  echo "Visit http://127.0.0.1:3000 to access Grafana"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 3000:3000
{{- end }}

üîê Grafana Login Credentials:
  Username: {{ .Values.grafana.adminUser }}
  Password: {{ .Values.grafana.adminPassword }}
{{- end }}

üìã USEFUL COMMANDS:

1. Check the status of your monitoring stack:
   kubectl get pods -l "app.kubernetes.io/instance={{ .Release.Name }}" -n {{ .Release.Namespace }}

2. View Prometheus logs:
   kubectl logs -l "{{ include "prometheus-grafana.prometheus.selectorLabels" . }}" -n {{ .Release.Namespace }}

3. View Grafana logs:
   kubectl logs -l "{{ include "prometheus-grafana.grafana.selectorLabels" . }}" -n {{ .Release.Namespace }}

4. Get ingress information:
   kubectl get ingress -n {{ .Release.Namespace }}

5. Check persistent volumes:
   kubectl get pvc -n {{ .Release.Namespace }}

{{- if .Values.alerting.enabled }}
6. Check alerting rules:
   kubectl get prometheusrules -n {{ .Release.Namespace }}
{{- end }}

üéØ NEXT STEPS:
1. Access Grafana and explore the pre-configured dashboards
2. Configure additional data sources if needed
3. Set up alerting rules and notification channels
4. Monitor your Kubernetes cluster metrics
5. Create custom dashboards for your applications

üîß TROUBLESHOOTING:
- If ALB is not ready, wait a few minutes for AWS to provision the load balancer
- Check pod logs if services are not responding
- Verify ingress annotations for ALB configuration
- Ensure your EKS cluster has the AWS Load Balancer Controller installed

Happy monitoring! üöÄ
