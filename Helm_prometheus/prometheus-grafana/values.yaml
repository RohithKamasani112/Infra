# Single Working Values File for Prometheus and Grafana
# This file works with the community charts and bash deployment script

# Cluster Configuration (Update these values from Terraform outputs)
cluster:
  name: "my-eks-cluster"                    # From terraform output: cluster_name
  region: "ap-south-1"                      # Your AWS region
  endpoint: ""                              # From terraform output: cluster_endpoint
  certificateAuthorityData: ""              # From terraform output: cluster_certificate_authority_data
  vpcId: ""                                 # From terraform output: vpc_id
  privateSubnets: []                        # From terraform output: private_subnets
  publicSubnets: []                         # From terraform output: public_subnets
  environment: "production"                 # Environment name

# Prometheus configuration
prometheus:
  enabled: true
  
  # Prometheus server configuration
  server:
    replicaCount: 1
    
    # Resource configuration
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    
    # Persistence for Prometheus data
    persistentVolume:
      enabled: true
      size: 50Gi
      storageClass: "gp3"
      accessModes:
        - ReadWriteOnce
    
    # Retention policy
    retention: "30d"
    
    # Service configuration
    service:
      type: ClusterIP
      port: 9090
    
    # Ingress configuration for Prometheus (ALB)
    ingress:
      enabled: true
      className: "alb"
      annotations:
        kubernetes.io/ingress.class: alb
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/target-type: ip
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
        alb.ingress.kubernetes.io/healthcheck-path: /-/healthy
        alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
        alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
        alb.ingress.kubernetes.io/healthy-threshold-count: "2"
        alb.ingress.kubernetes.io/unhealthy-threshold-count: "3"
      hosts:
        - paths:
            - path: /
              pathType: Prefix
      tls: []
    
    # Security context
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      fsGroup: 65534
    
    # Node selector and affinity
    nodeSelector: {}
    tolerations: []
    affinity: {}

  # Prometheus AlertManager
  alertmanager:
    enabled: true
    replicaCount: 1
    
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
    
    persistentVolume:
      enabled: true
      size: 10Gi
      storageClass: "gp3"
    
    service:
      type: ClusterIP
      port: 9093
    
    # Ingress for AlertManager
    ingress:
      enabled: true
      className: "alb"
      annotations:
        kubernetes.io/ingress.class: alb
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/target-type: ip
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
      hosts:
        - paths:
            - path: /
              pathType: Prefix

  # Node Exporter for node metrics
  nodeExporter:
    enabled: true
    
  # Kube State Metrics
  kubeStateMetrics:
    enabled: true

  # Pushgateway
  pushgateway:
    enabled: true

# Grafana configuration
grafana:
  enabled: true
  
  # Grafana deployment
  replicaCount: 1
  
  # Resource configuration
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
  
  # Admin credentials
  adminUser: admin
  adminPassword: "admin123"  # Change this in production
  
  # Persistence for Grafana data
  persistence:
    enabled: true
    size: 10Gi
    storageClassName: "gp3"
    accessModes:
      - ReadWriteOnce
  
  # Service configuration
  service:
    type: ClusterIP
    port: 3000
  
  # Ingress configuration for Grafana (ALB)
  ingress:
    enabled: true
    className: "alb"
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
      alb.ingress.kubernetes.io/healthcheck-path: /api/health
      alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
      alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
    hosts:
      - paths:
          - path: /
            pathType: Prefix
    tls: []
  
  # Grafana configuration
  grafana.ini:
    server:
      root_url: "http://localhost:3000"
    security:
      allow_embedding: true
    auth.anonymous:
      enabled: false
    analytics:
      check_for_updates: false
      reporting_enabled: false
  
  # Data sources configuration
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-server:9090
          access: proxy
          isDefault: true
          editable: true
  
  # Dashboard providers
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
  
  # Pre-configured dashboards
  dashboards:
    default:
      kubernetes-cluster:
        gnetId: 7249
        revision: 1
        datasource: Prometheus
      kubernetes-pods:
        gnetId: 6417
        revision: 1
        datasource: Prometheus
      node-exporter:
        gnetId: 1860
        revision: 27
        datasource: Prometheus
      prometheus-stats:
        gnetId: 2
        revision: 2
        datasource: Prometheus
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 472
    fsGroup: 472
  
  # Node selector and affinity
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Service Account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security Context (from existing values)
podSecurityContext:
  fsGroup: 2000

# Network Policy
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
  ingress: []
  egress: []

# Pod annotations and labels
podAnnotations: {}
podLabels: {}

# Additional monitoring components
additionalComponents:
  # Prometheus Operator (optional)
  prometheusOperator:
    enabled: false
  
  # Jaeger for distributed tracing (optional)
  jaeger:
    enabled: false

# Environment-specific configurations
environment:
  name: "production"
  monitoring:
    scrapeInterval: "30s"
    evaluationInterval: "30s"
    retentionTime: "30d"

# Alerting rules
alerting:
  enabled: true
  rules:
    - name: kubernetes-cluster
      rules:
        - alert: KubernetesNodeReady
          expr: kube_node_status_condition{condition="Ready",status="true"} == 0
          for: 10m
          labels:
            severity: critical
          annotations:
            summary: "Kubernetes Node not ready"
            description: "Node {{ $labels.node }} has been unready for more than 10 minutes"

        - alert: KubernetesPodCrashLooping
          expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Pod is crash looping"
            description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} is crash looping"
